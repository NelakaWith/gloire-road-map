name: Deploy

on:
  workflow_dispatch: {}
  push:
    tags:
      - "v*"
  release:
    types: [published, created]
  workflow_run:
    workflows: ["Release"]
    types: [completed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    env:
      DEPLOY_TAG: ${{ github.event_name == 'release' && github.event.release.tag_name || (github.ref_type == 'tag' && github.ref_name) || '' }}
    steps:
      - name: Determine DEPLOY_TAG from latest release (when triggered by Release workflow)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/github-script@v6
        with:
          script: |
            // Query the repository for the most recent release and export its tag
            const latest = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const tag = latest.data.tag_name;
            require('fs').appendFileSync(process.env.GITHUB_ENV, `DEPLOY_TAG=${tag}\n`);
            console.log(`Determined DEPLOY_TAG=${tag}`);
            return tag;

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ env.DEPLOY_TAG != '' && env.DEPLOY_TAG || (github.event_name == 'release' && github.event.release.tag_name || github.ref) }}

      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const ref = process.env.DEPLOY_TAG || github.ref;
              const response = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: ref,
                required_contexts: [],
                environment: 'production',
                auto_merge: false,
                description: 'Deployment triggered by CI',
                transient_environment: false
              });
              return String(response.data.id || '');
            } catch (err) {
              core && core.info && core.info('Create deployment failed: ' + String(err));
              return '';
            }

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build frontend
        working-directory: frontend
        run: |
          npm install
          npm run build

      - name: Copy files to droplet via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: .
          target: ~/gloire-road-map
          rm: true

      - name: Run deploy script on droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd ~/gloire-road-map/backend
            npm install
            pm2 restart server.js || pm2 start server.js --name  gloire-road-map-backend
            cd ~/gloire-road-map/frontend
            npm install
            npm run build

            # Ensure NGINX live folder exists and is owned by www-data
            sudo mkdir -p /var/www/gloire-road-map-live
            sudo chown -R www-data:www-data /var/www/gloire-road-map-live

            # Copy build to NGINX live folder
            sudo rm -rf /var/www/gloire-road-map-live/*
            sudo cp -r dist/* /var/www/gloire-road-map-live/
            sudo chown -R www-data:www-data /var/www/gloire-road-map-live

            # (Optional) Run DB migrations if you have a script
            mysql -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASS }} ${{ secrets.DB_NAME }} < backend/migrations/dump.sql

            # (Optional) Restart nginx if using static hosting
            sudo systemctl reload nginx

      - name: Mark deployment as successful
        if: ${{ success() && steps.create_deployment.outputs.result != '' }}
        uses: actions/github-script@v6
        env:
          DEPLOYMENT_ID: ${{ steps.create_deployment.outputs.result }}
        with:
          script: |
            try {
              const raw = process.env.DEPLOYMENT_ID;
              const deploymentId = Number(raw);
              if (!raw || Number.isNaN(deploymentId) || deploymentId <= 0) {
                console.log('No valid deployment id found, skipping createDeploymentStatus (success)');
                return;
              }
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deploymentId,
                state: 'success',
                description: 'Deployment succeeded',
                environment: 'production'
              });
            } catch (err) {
              console.log('createDeploymentStatus (success) skipped due to error:', String(err));
            }

      - name: Mark deployment as failed
        if: ${{ failure() && steps.create_deployment.outputs.result != '' }}
        uses: actions/github-script@v6
        env:
          DEPLOYMENT_ID: ${{ steps.create_deployment.outputs.result }}
        with:
          script: |
            try {
              const raw = process.env.DEPLOYMENT_ID;
              const deploymentId = Number(raw);
              if (!raw || Number.isNaN(deploymentId) || deploymentId <= 0) {
                console.log('No valid deployment id found, skipping createDeploymentStatus (failure)');
                return;
              }
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deploymentId,
                state: 'failure',
                description: 'Deployment failed',
                environment: 'production'
              });
            } catch (err) {
              console.log('createDeploymentStatus (failure) skipped due to error:', String(err));
            }
