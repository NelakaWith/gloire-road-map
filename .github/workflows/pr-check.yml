name: PR Commitlint

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]

jobs:
  commitlint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: |
          npm ci || npm install

      - name: Lint PR title
        run: |
          PR_TITLE=$(jq -r .pull_request.title "$GITHUB_EVENT_PATH")
          echo "PR title: $PR_TITLE"
          REGEX='^(feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert|release|hotfix)(\([a-z0-9_\-]+\))?: .+'
          if ! echo "$PR_TITLE" | grep -E "$REGEX"; then
            echo "PR title must follow Conventional Commits (e.g. 'feat(scope): add new API')."
            exit 1
          fi

      - name: Skip PR check token
        run: |
          PR_TITLE=$(jq -r .pull_request.title "$GITHUB_EVENT_PATH")
          SKIP_TOKEN='[skip pr-check]'
          if echo "$PR_TITLE" | grep -Fq "$SKIP_TOKEN"; then
            echo "Skip token found in PR title; skipping commitlint checks."
            exit 0
          fi

      - name: Run commitlint on PR commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use exact SHAs from the PR event to compute commit range for commitlint.
          PR_COMMITS=$(jq -r .pull_request.commits "$GITHUB_EVENT_PATH")
          if [ "$PR_COMMITS" -eq 0 ]; then
            echo "No commits to lint"
            exit 0
          fi
          BASE_REF=$(jq -r .pull_request.base.ref "$GITHUB_EVENT_PATH")
          BASE_SHA=$(jq -r .pull_request.base.sha "$GITHUB_EVENT_PATH")
          HEAD_SHA=$(jq -r .pull_request.head.sha "$GITHUB_EVENT_PATH")
          echo "PR commits: $PR_COMMITS"
          echo "Base ref: $BASE_REF, Base sha: $BASE_SHA, Head sha: $HEAD_SHA"

          # Ensure the base branch is fetched so git/commitlint can compute ranges reliably.
          git fetch origin "$BASE_REF" --depth=1 || true

          # Run commitlint across the exact commit range. This works even when the PR is from a fork.
          npx --no-install commitlint --from=$BASE_SHA --to=$HEAD_SHA || exit 1
