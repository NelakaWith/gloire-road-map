name: PR Commitlint

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]

jobs:
  commitlint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: |
          npm ci || npm install

      - name: Skip PR check token
        id: check_skip
        run: |
          PR_TITLE=$(jq -r .pull_request.title "$GITHUB_EVENT_PATH")
          SKIP_TOKEN='[skip pr-check]'
          echo "PR title: $PR_TITLE"
          if echo "$PR_TITLE" | grep -Fq "$SKIP_TOKEN"; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "Skip token found in PR title; skipping commitlint checks."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Lint PR title
        if: ${{ steps.check_skip.outputs.skip != 'true' }}
        run: |
          PR_TITLE=$(jq -r .pull_request.title "$GITHUB_EVENT_PATH")
          echo "PR title: $PR_TITLE"
          REGEX='^(feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert|release|hotfix)(\([a-z0-9_\-]+\))?: .+'
          if ! echo "$PR_TITLE" | grep -E "$REGEX"; then
            echo "PR title must follow Conventional Commits (e.g. 'feat(scope): add new API')."
            exit 1
          fi

      # skip token removed from here (moved earlier)

      - name: Run commitlint on PR commits
        if: ${{ steps.check_skip.outputs.skip != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Lint only the commits that are part of the PR by querying the GitHub API.
          PR_COMMITS_COUNT=$(jq -r .pull_request.commits "$GITHUB_EVENT_PATH")
          if [ "$PR_COMMITS_COUNT" -eq 0 ]; then
            echo "No commits to lint"
            exit 0
          fi
          COMMITS_URL=$(jq -r .pull_request.commits_url "$GITHUB_EVENT_PATH")
          echo "Fetching PR commits from: $COMMITS_URL"

          # Retrieve the list of SHAs for this PR using the GitHub API
          SHAS=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "$COMMITS_URL" | jq -r '.[].sha')
          if [ -z "$SHAS" ]; then
            echo "No commit SHAs returned from API"
            exit 0
          fi

          for sha in $SHAS; do
            echo "Linting commit: $sha"
            # Ensure the commit is available locally (checkout provides PR head, but fetch specific SHA as a fallback)
            git fetch --no-tags --depth=1 origin $sha || true
            git show --no-patch --format='%B' $sha > /tmp/commitmsg.txt || true
            if [ ! -s /tmp/commitmsg.txt ]; then
              echo "Failed to extract commit message for $sha"
              exit 1
            fi
            npx --no-install commitlint --edit /tmp/commitmsg.txt || exit 1
          done
